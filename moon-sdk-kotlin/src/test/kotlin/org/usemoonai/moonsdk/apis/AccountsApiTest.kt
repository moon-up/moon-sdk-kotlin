/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.usemoonai.moonsdk.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.usemoonai.moonsdk.apis.AccountsApi
import org.usemoonai.moonsdk.models.AccountAPIResponse
import org.usemoonai.moonsdk.models.BalanceAPIResponse
import org.usemoonai.moonsdk.models.BroadCastRawTransactionAPIResponse
import org.usemoonai.moonsdk.models.BroadcastInput
import org.usemoonai.moonsdk.models.CreateAccountInput
import org.usemoonai.moonsdk.models.DeployInput
import org.usemoonai.moonsdk.models.InputBody
import org.usemoonai.moonsdk.models.NonceAPIResponse
import org.usemoonai.moonsdk.models.SignMessage
import org.usemoonai.moonsdk.models.SignMessageAPIResponse
import org.usemoonai.moonsdk.models.SignTypedData
import org.usemoonai.moonsdk.models.TransactionAPIResponse

class AccountsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AccountsApi
        //val apiInstance = AccountsApi()

        // to test broadcastTx
        should("test broadcastTx") {
            // uncomment below to test broadcastTx
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val accountName : kotlin.String = accountName_example // kotlin.String | 
            //val broadcastInput : BroadcastInput =  // BroadcastInput | 
            //val result : BroadCastRawTransactionAPIResponse = apiInstance.broadcastTx(authorization, accountName, broadcastInput)
            //result shouldBe ("TODO")
        }

        // to test createAccount
        should("test createAccount") {
            // uncomment below to test createAccount
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val createAccountInput : CreateAccountInput =  // CreateAccountInput | 
            //val result : AccountAPIResponse = apiInstance.createAccount(authorization, createAccountInput)
            //result shouldBe ("TODO")
        }

        // to test deleteAccount
        should("test deleteAccount") {
            // uncomment below to test deleteAccount
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val accountName : kotlin.String = accountName_example // kotlin.String | 
            //val result : AccountAPIResponse = apiInstance.deleteAccount(authorization, accountName)
            //result shouldBe ("TODO")
        }

        // to test deployContract
        should("test deployContract") {
            // uncomment below to test deployContract
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val accountName : kotlin.String = accountName_example // kotlin.String | 
            //val deployInput : DeployInput =  // DeployInput | 
            //val result : TransactionAPIResponse = apiInstance.deployContract(authorization, accountName, deployInput)
            //result shouldBe ("TODO")
        }

        // to test getAccount
        should("test getAccount") {
            // uncomment below to test getAccount
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val accountName : kotlin.String = accountName_example // kotlin.String | 
            //val result : AccountAPIResponse = apiInstance.getAccount(authorization, accountName)
            //result shouldBe ("TODO")
        }

        // to test getBalance
        should("test getBalance") {
            // uncomment below to test getBalance
            //val accountName : kotlin.String = accountName_example // kotlin.String | 
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val chainId : kotlin.String = chainId_example // kotlin.String | 
            //val result : BalanceAPIResponse = apiInstance.getBalance(accountName, authorization, chainId)
            //result shouldBe ("TODO")
        }

        // to test getNonce
        should("test getNonce") {
            // uncomment below to test getNonce
            //val accountName : kotlin.String = accountName_example // kotlin.String | 
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val result : NonceAPIResponse = apiInstance.getNonce(accountName, authorization)
            //result shouldBe ("TODO")
        }

        // to test listAccounts
        should("test listAccounts") {
            // uncomment below to test listAccounts
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val result : AccountAPIResponse = apiInstance.listAccounts(authorization)
            //result shouldBe ("TODO")
        }

        // to test signMessage
        should("test signMessage") {
            // uncomment below to test signMessage
            //val accountName : kotlin.String = accountName_example // kotlin.String | 
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val signMessage : SignMessage =  // SignMessage | 
            //val result : SignMessageAPIResponse = apiInstance.signMessage(accountName, authorization, signMessage)
            //result shouldBe ("TODO")
        }

        // to test signTransaction
        should("test signTransaction") {
            // uncomment below to test signTransaction
            //val accountName : kotlin.String = accountName_example // kotlin.String | 
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val inputBody : InputBody =  // InputBody | 
            //val result : TransactionAPIResponse = apiInstance.signTransaction(accountName, authorization, inputBody)
            //result shouldBe ("TODO")
        }

        // to test signTypedData
        should("test signTypedData") {
            // uncomment below to test signTypedData
            //val accountName : kotlin.String = accountName_example // kotlin.String | 
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val signTypedData : SignTypedData =  // SignTypedData | 
            //val result : SignMessageAPIResponse = apiInstance.signTypedData(accountName, authorization, signTypedData)
            //result shouldBe ("TODO")
        }

        // to test transferEth
        should("test transferEth") {
            // uncomment below to test transferEth
            //val accountName : kotlin.String = accountName_example // kotlin.String | 
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val inputBody : InputBody =  // InputBody | 
            //val result : TransactionAPIResponse = apiInstance.transferEth(accountName, authorization, inputBody)
            //result shouldBe ("TODO")
        }

    }
}
