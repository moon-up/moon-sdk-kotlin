/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.usemoonai.moonsdk.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.usemoonai.moonsdk.apis.BitcoinApi
import org.usemoonai.moonsdk.models.AccountAPIResponse
import org.usemoonai.moonsdk.models.BitcoinAPIResponse
import org.usemoonai.moonsdk.models.BitcoinInput
import org.usemoonai.moonsdk.models.BitcoinTransactionInput

class BitcoinApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of BitcoinApi
        //val apiInstance = BitcoinApi()

        // to test createBitcoinAccount
        should("test createBitcoinAccount") {
            // uncomment below to test createBitcoinAccount
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val bitcoinInput : BitcoinInput =  // BitcoinInput | 
            //val result : AccountAPIResponse = apiInstance.createBitcoinAccount(authorization, bitcoinInput)
            //result shouldBe ("TODO")
        }

        // to test getBitcoinAccount
        should("test getBitcoinAccount") {
            // uncomment below to test getBitcoinAccount
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val accountName : kotlin.String = accountName_example // kotlin.String | 
            //val result : AccountAPIResponse = apiInstance.getBitcoinAccount(authorization, accountName)
            //result shouldBe ("TODO")
        }

        // to test listBitcoinAccounts
        should("test listBitcoinAccounts") {
            // uncomment below to test listBitcoinAccounts
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val result : AccountAPIResponse = apiInstance.listBitcoinAccounts(authorization)
            //result shouldBe ("TODO")
        }

        // to test signBitcoinTransaction
        should("test signBitcoinTransaction") {
            // uncomment below to test signBitcoinTransaction
            //val authorization : kotlin.String = authorization_example // kotlin.String | 
            //val accountName : kotlin.String = accountName_example // kotlin.String | 
            //val bitcoinTransactionInput : BitcoinTransactionInput =  // BitcoinTransactionInput | 
            //val result : BitcoinAPIResponse = apiInstance.signBitcoinTransaction(authorization, accountName, bitcoinTransactionInput)
            //result shouldBe ("TODO")
        }

    }
}
