/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.usemoonai.moonsdk.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.usemoonai.moonsdk.models.InputBody
import org.usemoonai.moonsdk.models.TransactionAPIResponse

import com.squareup.moshi.Json

import org.usemoonai.moonsdk.infrastructure.ApiClient
import org.usemoonai.moonsdk.infrastructure.ApiResponse
import org.usemoonai.moonsdk.infrastructure.ClientException
import org.usemoonai.moonsdk.infrastructure.ClientError
import org.usemoonai.moonsdk.infrastructure.ServerException
import org.usemoonai.moonsdk.infrastructure.ServerError
import org.usemoonai.moonsdk.infrastructure.MultiValueMap
import org.usemoonai.moonsdk.infrastructure.PartConfig
import org.usemoonai.moonsdk.infrastructure.RequestConfig
import org.usemoonai.moonsdk.infrastructure.RequestMethod
import org.usemoonai.moonsdk.infrastructure.ResponseType
import org.usemoonai.moonsdk.infrastructure.Success
import org.usemoonai.moonsdk.infrastructure.toMultiValue

class Erc20Api(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://beta.usemoon.ai")
        }
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return TransactionAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun allowanceErc20(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : TransactionAPIResponse {
        val localVarResponse = allowanceErc20WithHttpInfo(authorization = authorization, name = name, inputBody = inputBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TransactionAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return ApiResponse<TransactionAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun allowanceErc20WithHttpInfo(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : ApiResponse<TransactionAPIResponse?> {
        val localVariableConfig = allowanceErc20RequestConfig(authorization = authorization, name = name, inputBody = inputBody)

        return request<InputBody, TransactionAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation allowanceErc20
     *
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return RequestConfig
     */
    fun allowanceErc20RequestConfig(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : RequestConfig<InputBody> {
        val localVariableBody = inputBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc20/{name}/allowance".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return TransactionAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun approveErc20(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : TransactionAPIResponse {
        val localVarResponse = approveErc20WithHttpInfo(authorization = authorization, name = name, inputBody = inputBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TransactionAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return ApiResponse<TransactionAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun approveErc20WithHttpInfo(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : ApiResponse<TransactionAPIResponse?> {
        val localVariableConfig = approveErc20RequestConfig(authorization = authorization, name = name, inputBody = inputBody)

        return request<InputBody, TransactionAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation approveErc20
     *
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return RequestConfig
     */
    fun approveErc20RequestConfig(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : RequestConfig<InputBody> {
        val localVariableBody = inputBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc20/{name}/approve".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return TransactionAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun balanceOfErc20(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : TransactionAPIResponse {
        val localVarResponse = balanceOfErc20WithHttpInfo(authorization = authorization, name = name, inputBody = inputBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TransactionAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return ApiResponse<TransactionAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun balanceOfErc20WithHttpInfo(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : ApiResponse<TransactionAPIResponse?> {
        val localVariableConfig = balanceOfErc20RequestConfig(authorization = authorization, name = name, inputBody = inputBody)

        return request<InputBody, TransactionAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation balanceOfErc20
     *
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return RequestConfig
     */
    fun balanceOfErc20RequestConfig(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : RequestConfig<InputBody> {
        val localVariableBody = inputBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc20/{name}/balance-of".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return TransactionAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun decimalsErc20(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : TransactionAPIResponse {
        val localVarResponse = decimalsErc20WithHttpInfo(authorization = authorization, name = name, inputBody = inputBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TransactionAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return ApiResponse<TransactionAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun decimalsErc20WithHttpInfo(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : ApiResponse<TransactionAPIResponse?> {
        val localVariableConfig = decimalsErc20RequestConfig(authorization = authorization, name = name, inputBody = inputBody)

        return request<InputBody, TransactionAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation decimalsErc20
     *
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return RequestConfig
     */
    fun decimalsErc20RequestConfig(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : RequestConfig<InputBody> {
        val localVariableBody = inputBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc20/{name}/decimals".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return TransactionAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun nameErc20(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : TransactionAPIResponse {
        val localVarResponse = nameErc20WithHttpInfo(authorization = authorization, name = name, inputBody = inputBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TransactionAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return ApiResponse<TransactionAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun nameErc20WithHttpInfo(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : ApiResponse<TransactionAPIResponse?> {
        val localVariableConfig = nameErc20RequestConfig(authorization = authorization, name = name, inputBody = inputBody)

        return request<InputBody, TransactionAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation nameErc20
     *
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return RequestConfig
     */
    fun nameErc20RequestConfig(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : RequestConfig<InputBody> {
        val localVariableBody = inputBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc20/{name}/name".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return TransactionAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun symbolErc20(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : TransactionAPIResponse {
        val localVarResponse = symbolErc20WithHttpInfo(authorization = authorization, name = name, inputBody = inputBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TransactionAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return ApiResponse<TransactionAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun symbolErc20WithHttpInfo(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : ApiResponse<TransactionAPIResponse?> {
        val localVariableConfig = symbolErc20RequestConfig(authorization = authorization, name = name, inputBody = inputBody)

        return request<InputBody, TransactionAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation symbolErc20
     *
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return RequestConfig
     */
    fun symbolErc20RequestConfig(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : RequestConfig<InputBody> {
        val localVariableBody = inputBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc20/{name}/symbol".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return TransactionAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun totalSupplyErc20(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : TransactionAPIResponse {
        val localVarResponse = totalSupplyErc20WithHttpInfo(authorization = authorization, name = name, inputBody = inputBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TransactionAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return ApiResponse<TransactionAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun totalSupplyErc20WithHttpInfo(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : ApiResponse<TransactionAPIResponse?> {
        val localVariableConfig = totalSupplyErc20RequestConfig(authorization = authorization, name = name, inputBody = inputBody)

        return request<InputBody, TransactionAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation totalSupplyErc20
     *
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return RequestConfig
     */
    fun totalSupplyErc20RequestConfig(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : RequestConfig<InputBody> {
        val localVariableBody = inputBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc20/{name}/total-supply".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return TransactionAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun transferErc20(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : TransactionAPIResponse {
        val localVarResponse = transferErc20WithHttpInfo(authorization = authorization, name = name, inputBody = inputBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TransactionAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return ApiResponse<TransactionAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun transferErc20WithHttpInfo(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : ApiResponse<TransactionAPIResponse?> {
        val localVariableConfig = transferErc20RequestConfig(authorization = authorization, name = name, inputBody = inputBody)

        return request<InputBody, TransactionAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation transferErc20
     *
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return RequestConfig
     */
    fun transferErc20RequestConfig(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : RequestConfig<InputBody> {
        val localVariableBody = inputBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc20/{name}/transfer".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return TransactionAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun transferFromErc20(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : TransactionAPIResponse {
        val localVarResponse = transferFromErc20WithHttpInfo(authorization = authorization, name = name, inputBody = inputBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TransactionAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return ApiResponse<TransactionAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun transferFromErc20WithHttpInfo(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : ApiResponse<TransactionAPIResponse?> {
        val localVariableConfig = transferFromErc20RequestConfig(authorization = authorization, name = name, inputBody = inputBody)

        return request<InputBody, TransactionAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation transferFromErc20
     *
     * @param authorization 
     * @param name 
     * @param inputBody 
     * @return RequestConfig
     */
    fun transferFromErc20RequestConfig(authorization: kotlin.String, name: kotlin.String, inputBody: InputBody) : RequestConfig<InputBody> {
        val localVariableBody = inputBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc20/{name}/transfer-from".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
