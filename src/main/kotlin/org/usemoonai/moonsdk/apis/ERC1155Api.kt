/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.usemoonai.moonsdk.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.usemoonai.moonsdk.models.AccountControllerResponse
import org.usemoonai.moonsdk.models.Erc1155Request

import com.squareup.moshi.Json

import org.usemoonai.moonsdk.infrastructure.ApiClient
import org.usemoonai.moonsdk.infrastructure.ApiResponse
import org.usemoonai.moonsdk.infrastructure.ClientException
import org.usemoonai.moonsdk.infrastructure.ClientError
import org.usemoonai.moonsdk.infrastructure.ServerException
import org.usemoonai.moonsdk.infrastructure.ServerError
import org.usemoonai.moonsdk.infrastructure.MultiValueMap
import org.usemoonai.moonsdk.infrastructure.PartConfig
import org.usemoonai.moonsdk.infrastructure.RequestConfig
import org.usemoonai.moonsdk.infrastructure.RequestMethod
import org.usemoonai.moonsdk.infrastructure.ResponseType
import org.usemoonai.moonsdk.infrastructure.Success
import org.usemoonai.moonsdk.infrastructure.toMultiValue

class ERC1155Api(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://vault-api.usemoon.ai")
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return AccountControllerResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun balanceOf(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : AccountControllerResponse {
        val localVarResponse = balanceOfWithHttpInfo(name = name, authorization = authorization, erc1155Request = erc1155Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountControllerResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return ApiResponse<AccountControllerResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun balanceOfWithHttpInfo(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : ApiResponse<AccountControllerResponse?> {
        val localVariableConfig = balanceOfRequestConfig(name = name, authorization = authorization, erc1155Request = erc1155Request)

        return request<Erc1155Request, AccountControllerResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation balanceOf
     *
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return RequestConfig
     */
    fun balanceOfRequestConfig(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : RequestConfig<Erc1155Request> {
        val localVariableBody = erc1155Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc1155/{name}/balance-of".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return AccountControllerResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun balanceOfBatch(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : AccountControllerResponse {
        val localVarResponse = balanceOfBatchWithHttpInfo(name = name, authorization = authorization, erc1155Request = erc1155Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountControllerResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return ApiResponse<AccountControllerResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun balanceOfBatchWithHttpInfo(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : ApiResponse<AccountControllerResponse?> {
        val localVariableConfig = balanceOfBatchRequestConfig(name = name, authorization = authorization, erc1155Request = erc1155Request)

        return request<Erc1155Request, AccountControllerResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation balanceOfBatch
     *
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return RequestConfig
     */
    fun balanceOfBatchRequestConfig(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : RequestConfig<Erc1155Request> {
        val localVariableBody = erc1155Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc1155/{name}/balance-of-batch".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return AccountControllerResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun isApprovedForAll(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : AccountControllerResponse {
        val localVarResponse = isApprovedForAllWithHttpInfo(name = name, authorization = authorization, erc1155Request = erc1155Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountControllerResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return ApiResponse<AccountControllerResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun isApprovedForAllWithHttpInfo(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : ApiResponse<AccountControllerResponse?> {
        val localVariableConfig = isApprovedForAllRequestConfig(name = name, authorization = authorization, erc1155Request = erc1155Request)

        return request<Erc1155Request, AccountControllerResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation isApprovedForAll
     *
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return RequestConfig
     */
    fun isApprovedForAllRequestConfig(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : RequestConfig<Erc1155Request> {
        val localVariableBody = erc1155Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc1155/{name}/is-approved-for-all".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return AccountControllerResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun safeBatchTransferFrom(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : AccountControllerResponse {
        val localVarResponse = safeBatchTransferFromWithHttpInfo(name = name, authorization = authorization, erc1155Request = erc1155Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountControllerResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return ApiResponse<AccountControllerResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun safeBatchTransferFromWithHttpInfo(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : ApiResponse<AccountControllerResponse?> {
        val localVariableConfig = safeBatchTransferFromRequestConfig(name = name, authorization = authorization, erc1155Request = erc1155Request)

        return request<Erc1155Request, AccountControllerResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation safeBatchTransferFrom
     *
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return RequestConfig
     */
    fun safeBatchTransferFromRequestConfig(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : RequestConfig<Erc1155Request> {
        val localVariableBody = erc1155Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc1155/{name}/safe-batch-transfer-from".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return AccountControllerResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun safeTransferFrom(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : AccountControllerResponse {
        val localVarResponse = safeTransferFromWithHttpInfo(name = name, authorization = authorization, erc1155Request = erc1155Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountControllerResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return ApiResponse<AccountControllerResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun safeTransferFromWithHttpInfo(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : ApiResponse<AccountControllerResponse?> {
        val localVariableConfig = safeTransferFromRequestConfig(name = name, authorization = authorization, erc1155Request = erc1155Request)

        return request<Erc1155Request, AccountControllerResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation safeTransferFrom
     *
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return RequestConfig
     */
    fun safeTransferFromRequestConfig(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : RequestConfig<Erc1155Request> {
        val localVariableBody = erc1155Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc1155/{name}/safe-transfer-from".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return AccountControllerResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun setApprovalForAll(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : AccountControllerResponse {
        val localVarResponse = setApprovalForAllWithHttpInfo(name = name, authorization = authorization, erc1155Request = erc1155Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountControllerResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return ApiResponse<AccountControllerResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun setApprovalForAllWithHttpInfo(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : ApiResponse<AccountControllerResponse?> {
        val localVariableConfig = setApprovalForAllRequestConfig(name = name, authorization = authorization, erc1155Request = erc1155Request)

        return request<Erc1155Request, AccountControllerResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setApprovalForAll
     *
     * @param name 
     * @param authorization 
     * @param erc1155Request 
     * @return RequestConfig
     */
    fun setApprovalForAllRequestConfig(name: kotlin.String, authorization: kotlin.String, erc1155Request: Erc1155Request) : RequestConfig<Erc1155Request> {
        val localVariableBody = erc1155Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/erc1155/{name}/set-approval-for-all".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
